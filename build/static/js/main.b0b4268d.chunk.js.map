{"version":3,"sources":["modules/store/indexDb.js","store/ducks/currency.js","constants.mjs","components/App.js","store/reducer.js","store/utils.js","store/saga.js","store/index.js","Root.js","serviceWorker.js","index.js"],"names":["tablesList","indexDb","DB","name","tables","version","arguments","length","undefined","Object","classCallCheck","this","openDB","upgrade","db","forEach","tableName","createObjectStore","keyPath","autoIncrement","value","add","id","delete","getAll","CurrencyRecord","Record","symbol","ReducerState","entities","OrderedMap","loading","error","ADD_CURRENCY_REQUEST","ADD_CURRENCY_SUCCESS","DELETE_CURRENCY_REQUEST","DELETE_CURRENCY_SUCCESS","GET_CURRENCIES_REQUEST","GET_CURRENCIES_SUCCESS","GET_RATES_SUCCESS","ERROR","getCurrenciesSaga","regenerator_default","a","mark","data","wrap","_context","prev","next","sent","put","type","payload","t0","stop","addCurrencySaga","action","_context2","abrupt","toUpperCase","deleteCurrencySaga","_context3","getRatesSaga","currencies","symbols","_ref3","rates","_context4","Array","isArray","map","item","call","axios","get","concat","join","reduce","assign","defineProperty","Math","round","saga","_context5","all","takeEvery","entitiesSelector","createSelector","state","currenciesSelector","valueSeq","toArray","toJS","App","addingCurrency","addCurrency","_this","props","setState","toggle","keyDownHandler","event","keyCode","target","connect","getCurrencies","setInterval","_this2","getRates","_this3","_this$props","deleteCurrency","_this$state","react_default","createElement","className","onClick","placeholder","onChange","e","onKeyDown","currency","key","Component","combineReducers","set","setIn","deleteIn","RecordModel","Map","fromJS","mapDataToEntries","entries","_ref","_ref2","slicedToArray","updateIn","rootSaga","currencySaga","_marked","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","logger","store","createStore","reducer","window","run","Root","es","components_App","Boolean","location","hostname","match","ReactDOM","render","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0b4268d.chunk.js","sourcesContent":["import { openDB } from 'idb';\n\nexport const CURRENCY_TABLE_NAME = 'currencies';\n\nconst tablesList = [CURRENCY_TABLE_NAME];\n\nclass DB {\n    constructor(name, tables, version = 1) {\n        this.name = name;\n        this.version = version;\n    }\n\n    async connect() {\n        this.db = await openDB(this.name, this.version, {\n            upgrade(db) {\n                tablesList.forEach(tableName => {\n                    db.createObjectStore(tableName, {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    })\n                })\n            },\n        })\n    }\n\n    add(tableName, value) {\n        return this.db.add(tableName, value);\n    }\n\n    delete(tableName, id) {\n        return this.db.delete(tableName, id);\n    }\n\n    getAll(tableName) {\n        return this.db.getAll(tableName);\n    }\n\n}\n\nexport default new DB('currency-db')\n","import axios from 'axios';\nimport {OrderedMap, Record} from 'immutable'\nimport {put, call, takeEvery, all} from 'redux-saga/effects'\nimport {API_BASE, API_KEY, BASE_CURRENCY} from '../../constants';\nimport {createSelector} from 'reselect'\nimport {mapDataToEntries} from '../utils'\nimport db, { CURRENCY_TABLE_NAME } from '../../modules/store/indexDb';\n\nconst CurrencyRecord = Record({\n    id: null,\n    symbol: '',\n    value: 0\n});\n\nconst ReducerState = Record({\n    entities: new OrderedMap({}),\n    loading: false,\n    error: null\n});\n\nexport const moduleName = 'currency';\n\nexport const ADD_CURRENCY_REQUEST = 'ADD_CURRENCY_REQUEST';\nexport const ADD_CURRENCY_SUCCESS = 'ADD_CURRENCY_SUCCESS';\nexport const DELETE_CURRENCY_REQUEST = 'DELETE_CURRENCY_REQUEST';\nexport const DELETE_CURRENCY_SUCCESS = 'DELETE_CURRENCY_SUCCESS';\nexport const GET_CURRENCIES_REQUEST = 'GET_ALL_CURRENCIES_REQUEST';\nexport const GET_CURRENCIES_SUCCESS = 'GET_CURRENCIES_SUCCESS';\nexport const GET_RATES_REQUEST = 'GET_RATES_REQUEST';\nexport const GET_RATES_SUCCESS = 'GET_RATES_SUCCESS';\nexport const ERROR = 'ERROR';\n\nexport default function reducer(state = new ReducerState(), action) {\n    const {type, payload} = action;\n\n    switch (type) {\n        case ADD_CURRENCY_REQUEST:\n        case GET_CURRENCIES_REQUEST:\n            return state\n                .set('loading', true)\n                .set('error', null);\n        case ADD_CURRENCY_SUCCESS:\n            return state\n                .set('loading', false)\n                .set('error', null)\n                .setIn(['entities', payload.id], new CurrencyRecord(payload));\n        case DELETE_CURRENCY_SUCCESS:\n            return state\n                .set('loading', false)\n                .set('error', null)\n                .deleteIn(['entities', payload]);\n        case GET_CURRENCIES_SUCCESS:\n            return state\n                .set('loading', false)\n                .set('entities', mapDataToEntries(payload, CurrencyRecord));\n        case GET_RATES_SUCCESS:\n            Object.entries(payload)\n                .forEach(([id, value]) => state = value === 0\n                    ? state.deleteIn(['entities', id])\n                    : state\n                        .updateIn(\n                            ['entities', id],\n                            item => item.set('value', value)\n                        )\n                );\n            return state;\n        case ERROR:\n            return state\n                .set('loading', false)\n                .set('error', payload);\n        default:\n            return state.set('error', null)\n    }\n}\n\nexport const getCurrencies = () => {\n    return {\n        type: GET_CURRENCIES_REQUEST,\n    }\n};\n\nexport function addCurrency(symbol) {\n    return {\n        type: ADD_CURRENCY_REQUEST,\n        payload: { symbol }\n    }\n}\n\nexport function deleteCurrency(id) {\n    return {\n        type: DELETE_CURRENCY_REQUEST,\n        payload: {id}\n    }\n}\n\nexport const getRates = (payload) => {\n    return {\n        type: GET_RATES_REQUEST,\n        payload\n    }\n};\n\nexport const getCurrenciesSaga = function * () {\n    try {\n        const data = yield db.getAll(CURRENCY_TABLE_NAME);\n        yield put({\n            type: GET_CURRENCIES_SUCCESS,\n            payload: data\n        })\n    } catch (error) {\n        yield put({\n            type: ERROR,\n            payload: error\n        })\n    }\n};\n\nexport const addCurrencySaga = function * (action) {\n    let { symbol } = action.payload;\n    if (!symbol.length || symbol === BASE_CURRENCY) return;\n    symbol = symbol.toUpperCase();\n    try {\n        yield db.add(CURRENCY_TABLE_NAME, { id: symbol, symbol });\n        yield put({\n            type: ADD_CURRENCY_SUCCESS,\n            payload: { id: symbol, symbol }\n        })\n    } catch (error) {\n        yield put({\n            type: ERROR,\n            payload: error\n        })\n    }\n};\n\nexport const deleteCurrencySaga = function * (action) {\n    try {\n        const { id } = action.payload;\n        yield db.delete(CURRENCY_TABLE_NAME, id);\n        yield put({\n            type: DELETE_CURRENCY_SUCCESS,\n            payload: id\n        })\n    } catch (e) {}\n};\n\nexport const getRatesSaga = function * (action) {\n    let currencies = action.payload;\n    if  (Array.isArray(currencies)) {\n        if (!currencies.length) {\n            return\n        }\n    } else {\n        currencies = [currencies]\n    }\n    const symbols = currencies.map((item) => item.id);\n    try {\n        const { data: { rates } } = yield call(axios.get, `${API_BASE}latest.json?app_id=${API_KEY}&symbols=${BASE_CURRENCY},${symbols.join(',')}`);\n        yield put({\n            type: GET_RATES_SUCCESS,\n            payload: symbols.reduce((map, symbol) => Object.assign(\n                map,\n                {[symbol]: rates[symbol] ? Math.round((rates[BASE_CURRENCY] * 100) / rates[symbol]) / 100 : 0}),\n                {}\n            )\n        })\n    } catch (error) {\n        yield put({\n            type: ERROR,\n            payload: error\n        })\n    }\n};\n\nexport const saga = function * () {\n    yield all([\n        takeEvery(ADD_CURRENCY_REQUEST, addCurrencySaga),\n        takeEvery(DELETE_CURRENCY_REQUEST, deleteCurrencySaga),\n        takeEvery(GET_CURRENCIES_REQUEST, getCurrenciesSaga),\n        takeEvery(GET_CURRENCIES_SUCCESS, getRatesSaga),\n        takeEvery(ADD_CURRENCY_SUCCESS, getRatesSaga),\n        takeEvery(GET_RATES_REQUEST, getRatesSaga),\n    ])\n};\n\nexport const stateSelector = state => state[moduleName];\nexport const entitiesSelector = createSelector(stateSelector, state => state.entities);\nexport const currenciesSelector = createSelector(entitiesSelector, entities => entities.valueSeq().toArray().map(item => item.toJS()));\n","export const API_BASE = `https://openexchangerates.org/api/`;\nexport const API_KEY = '0faf8af7d8c2487c96b30e275f292df5';\nexport const BASE_CURRENCY = 'RUB';\nexport const RATES_UPDATE_INTERVAL = 60 * 1000;\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport {\n    getCurrencies,\n    addCurrency,\n    deleteCurrency,\n    getRates,\n    currenciesSelector,\n} from '../store/ducks/currency';\nimport db from '../modules/store/indexDb';\nimport { RATES_UPDATE_INTERVAL } from '../constants';\n\nclass App extends Component {\n    state = {\n        addingCurrency: false,\n        symbol: ''\n    };\n\n    async componentDidMount() {\n        await db.connect();\n        this.props.getCurrencies();\n        setInterval(() => this.props.getRates(this.props.currencies), RATES_UPDATE_INTERVAL)\n    };\n\n    addCurrency = () => {\n        const { addCurrency } = this.props;\n        addCurrency(this.state.symbol);\n        this.setState({\n            symbol: '',\n            addingCurrency: false\n        });\n    };\n\n    toggle = () => {\n        this.setState({ addingCurrency: !this.state.addingCurrency })\n    };\n\n    keyDownHandler = (event) => {\n        if (event.keyCode === 13) {\n            this.addCurrency(event.target.value);\n        }\n    };\n\n    render() {\n        const { deleteCurrency, getRates, currencies } = this.props;\n        const { addingCurrency, symbol } = this.state;\n        return (\n            <div className=\"container\">\n                <button\n                    className=\"button button--circle update-button\"\n                    onClick={() => getRates(currencies)}\n                ><i className=\"material-icons\">update</i></button>\n                <div className=\"df aic jcc mb-1\">\n                    { !addingCurrency && <button className=\"button\" onClick={this.toggle}>Add currency</button> }\n                    { addingCurrency && <div className=\"df aic jcc\">\n                        <input\n                            type=\"text\"\n                            value={symbol}\n                            className=\"input\"\n                            placeholder=\"Symbol\"\n                            id=\"input\"\n                            onChange={e => this.setState({symbol: e.target.value})}\n                            onKeyDown={this.keyDownHandler}\n                        />\n                        <button className=\"button\" onClick={this.addCurrency}>ОК</button>\n                    </div> }\n                </div>\n                <div>\n                    <div className=\"df aic jcsa table__header\">\n                        <span>Symbol</span><span>Value</span><span>Delete</span>\n                    </div>\n                </div>\n                <div className=\"table__wrapper\">\n                    <table className=\"table\">\n                        <tbody>\n                        {currencies.map(currency => <tr key={currency.id}>\n                            <td>{currency.symbol}</td>\n                            <td>{currency.value}</td>\n                            <td><i onClick={() => deleteCurrency(currency.id)} className=\"material-icons\">delete</i></td>\n                        </tr>)}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(state => {\n    return {\n        currencies: currenciesSelector(state)\n    }\n}, { getCurrencies, addCurrency, deleteCurrency, getRates })(App)\n","import {combineReducers} from 'redux'\nimport currencyReducer, {moduleName as currencyModule} from './ducks/currency'\n\nexport default combineReducers({\n    [currencyModule]: currencyReducer,\n})","import {OrderedMap, Map, fromJS} from 'immutable'\n\nexport function mapDataToEntries(data, RecordModel = Map) {\n    if (!data) return new OrderedMap({});\n    return new OrderedMap(fromJS(data.reduce((prev, item) => {\n        prev[item.id] = new RecordModel(item);\n        return prev;\n    }, {})))\n}\n","import {all} from 'redux-saga/effects'\nimport {saga as currencySaga} from './ducks/currency'\n\nexport default  function * rootSaga() {\n    yield all([\n        currencySaga(),\n    ])\n}","import {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducer'\nimport logger from 'redux-logger'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from './saga'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst enhancer = applyMiddleware(sagaMiddleware, logger)\n\nconst store = createStore(reducer, enhancer)\nwindow.store = store\n\nsagaMiddleware.run(rootSaga)\n\nexport default store","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './store';\n\nclass Root extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <App />\n            </Provider>\n        );\n    }\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/index.less';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}